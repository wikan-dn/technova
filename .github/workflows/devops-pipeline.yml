name: DevOps Pipeline - CI/CD for Inventory Service

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  ci_pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install Dependencies
        run: |
          pip install --upgrade pip
          pip install pytest flake8

      - name: Linting with flake8
        run: |
          flake8 .

      - name: Run Unit and Integration Tests
        run: |
          pip install pytest
          pytest unit_test.py integration_test.py -v

      - name: Build Docker Image
        run: |
          docker build -t ghcr.io/${{ github.actor }}/inventory-service:latest .

      - name: Scan Docker Image with Trivy (Optional)
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ github.actor }}/inventory-service:latest
          format: 'table'
          exit-code: '1'
          severity: 'MEDIUM,HIGH,CRITICAL'

      - name: Log in to GitHub Container Registry
        run: docker login ghcr.io -u ${{ github.actor }} -p ${{ secrets.GITHUB_TOKEN }}

      - name: Push Docker Image to GHCR
        run: |
          docker push ghcr.io/${{ github.actor }}/inventory-service:latest

  cd_pipeline:
    needs: ci_pipeline
    runs-on: ubuntu-latest

    environment: production

    steps:
      - name: Deploy to Kubernetes Cluster (Example)
        env:
          KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        run: |
          # Simpan kubeconfig dari secret
          echo "$KUBE_CONFIG_DATA" | base64 --decode > ~/.kube/config

          # Contoh deploy menggunakan kubectl
          kubectl apply -f kubernetes/deployment.yaml
          kubectl apply -f kubernetes/service.yaml

      - name: Notify Deployment Success
        run: |
          echo "Deployment to Production Successful!"